@using Hospital.Web.Models
@{
    ViewData["Title"] = "Patients";
}
@model PatientFilterViewModel;

<h2>Patients</h2>
<partial name="_PartientFilterPartial.cshtml" for="@Model" />
<div class="row">
    <div class="col-lg-12 text-right">
        <button type="button" class="btn btn-info ml-2" onClick="FilterData()">
            <i class="fas fa-filter"></i>
            Filter
        </button>
        <button type="button" class="btn btn-warning ml-2" onClick="ClearFilter()">
            <i class="fas fa-eraser"></i>
            Clear
        </button>
        <button type="button" class="btn btn-primary ml-2" onclick="OpenCreateModal()">
            <i class="fas fa-plus"></i>
            Create
        </button>
        <button type="button" class="btn btn-success ml-2" onClick="ExportCsv()">
            <i class="fas fa-file-excel"></i>
            Export
        </button>
        <button type="button" class="btn btn-danger ml-2" onClick="PrintPdf()">
            <i class="fas fa-file-pdf"></i>
            Print
        </button>
    </div>
</div>
<div>
    <table id="grid"></table>
    <div id="pager"></div>
</div>
<!-- Modal -->
<div class="modal fade" id="patientModal" tabindex="-1" aria-hidden="true">
</div>
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
</div>
@section scripts {
    <script>
        var paramFilterObj = {};

        $(function () {
            // Date picker
            $('#filter-dob-date').datetimepicker({
                format: 'L'
            });
            $("#grid").jqGrid
                ({
                    url: "/Patient/GetDataGrid",
                    datatype: 'json',
                    mtype: 'Post',
                    postData: {
                        filter: {
                            ChartNumber: function () { return paramFilterObj.ChartNumber },
                            FirstName: function () { return paramFilterObj.FirstName },
                            LastName: function () { return paramFilterObj.LastName },
                            Gender: function () { return paramFilterObj.Gender },
                            Dob: function () { return paramFilterObj.Dob },
                            Phone: function () { return paramFilterObj.Phone },
                            Email: function () { return paramFilterObj.Email },
                            Address: function () { return paramFilterObj.Address },
                            WardCode: function () { return paramFilterObj.WardCode },
                            DistrictCode: function () { return paramFilterObj.DistrictCode },
                            ProvinceCode: function () { return paramFilterObj.ProvinceCode },
                        }
                    },
                    colModel: [
                        { label: "Id", name: "id", hidden: true },
                        { label: "Chart Number", name: "chartNumber" },
                        {
                            label: "First Name", name: "firstName", formatter: function (cellvalue, options, rowobject) {
                                return '<a href="#" class="grid-firstname" data-type="text" data-pk="' + rowobject.id + '" data-url="/Patient/UpdateProperty" data-name="FirstName" data-title="Enter first name">' + cellvalue + '</a>';
                            }
                        },
                        {
                            label: "Last Name", name: "lastName", formatter: function (cellvalue, options, rowobject) {
                                return '<a href="#" class="grid-lastname" data-type="text" data-pk="' + rowobject.id + '" data-url="/Patient/UpdateProperty" data-name="LastName" data-title="Enter last name">' + cellvalue + '</a>';
                            }
                        },
                        {
                            label: "Gender", name: "gender", formatter: function (cellvalue, options, rowobject) {
                                return '<a href="#" class="grid-gender" data-type="select" data-pk="' + rowobject.id + '" data-url="/Patient/UpdateProperty" data-name="Gender" data-title="Select gender" data-value="' + cellvalue + '">' + cellvalue + '</a>';
                            }
                        },
                        {
                            label: "Date of birth", name: "dob", formatter: function (cellvalue, options, rowobject) {
                                return '<a href="#" class="grid-dob" data-type="date" data-pk="' + rowobject.id + '" data-url="/Patient/UpdateProperty" data-name="Dob" data-title="Select date of birth" data-value="' + formatDate(cellvalue) + '" data-format="mm/dd/yyyy" data-view-format="mm/dd/yyyy">' + formatDate(cellvalue) + '</a>';
                            }
                        },
                        {
                            label: "Phone", name: "phone", formatter: function (cellvalue, options, rowobject) {
                                return '<a href="#" class="grid-phone" data-type="number" data-pk="' + rowobject.id + '" data-url="/Patient/UpdateProperty" data-name="Phone" data-title="Enter phone">' + (cellvalue ?? "") + '</a>';
                            }
                        },
                        {
                            label: "Email", name: "email", formatter: function (cellvalue, options, rowobject) {
                                return '<a href="#" class="grid-email" data-type="email" data-pk="' + rowobject.id + '" data-url="/Patient/UpdateProperty" data-name="Email" data-title="Enter email">' + (cellvalue ?? "") + '</a>';
                            }
                        },
                        {
                            label: "Address", name: "address", formatter: function (cellvalue, options, rowobject) {
                                return '<a href="#" class="grid-address" data-type="text" data-pk="' + rowobject.id + '" data-url="/Patient/UpdateProperty" data-name="Address" data-title="Enter address">' + (cellvalue ?? "") + '</a>';
                            }
                        },
                        {
                            label: "Actions", formatter: function (cellvalue, options, rowobject) {
                                return '<div class="text-center">'
                                    + '<button type="button" class="btn btn-info ml-2" onClick=OpenEditModal(' + rowobject.id + ')>Edit</button>'
                                    + '<button type="button" class="btn btn-danger ml-2" onClick=OpenDeleteConfirmModalDialog(' + rowobject.id + ',"' + rowobject.chartNumber + '")>Delete</button>'
                                    + '</div>';
                            }
                        }
                    ],
                    pager: jQuery('#pager'),
                    height: '100%',
                    autowidth: true,
                    rowNum: 10,
                    rowList: [10, 20, 30, 50],
                    viewrecords: true,
                    beforeRequest: function () {
                        GetDataFilter();
                    },
                    loadComplete: function () {
                        $('.grid-firstname').editable();
                        $('.grid-lastname').editable();
                        $('.grid-gender').editable({
                            source: [
                                { value: "Male", text: 'Male' },
                                { value: "Female", text: 'Female' },
                            ]
                        });
                        $('.grid-dob').editable();
                        $('.grid-phone').editable();
                        $('.grid-email').editable();
                        $('.grid-address').editable();
                    }
                })

        })

        function formatDate(inputDate) {
            var date = new Date(inputDate);

            var day = date.getDate();
            var month = date.getMonth() + 1;
            var year = date.getFullYear();

            day = (day < 10) ? '0' + day : day;
            month = (month < 10) ? '0' + month : month;

            return month + '/' + day + '/' + year;
        }

        function GetDataFilter() {
            $.each($('#filter-form').serializeArray(), function (_, kv) {
                paramFilterObj[kv.name] = kv.value;
            });
        }

        function ReloadGrid() {
            jQuery("#grid")
                .trigger("reloadGrid");
        }

        function FilterData() {
            ReloadGrid();
        }

        function ClearFilter() {
            $('#filter-form')[0].reset();
            ReloadGrid();
        }

        function OpenCreateModal() {
            $.ajax({
                type: "GET",
                url: "/Patient/OpenModalDialog",
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: function (response) {
                    $("#patientModal").html(response);
                    //Date picker
                    $('#info-dob-date').datetimepicker({
                        format: 'L'
                    });
                    $("#patientModal").modal('show');
                },
                error: function (response) {
                    toastr.error("Internal Server Error!!!");
                }
            });
        }

        function OpenEditModal(id) {
            $.ajax({
                type: "GET",
                url: "/Patient/OpenModalDialog",
                contentType: "application/json; charset=utf-8",
                data: {
                    IsEdit: true,
                    Id: id
                },
                dataType: "html",
                success: function (response) {
                    $("#patientModal").html(response);
                    //Date picker
                    $('#info-dob-date').datetimepicker({
                        format: 'L'
                    });
                    $("#patientModal").modal('show');
                },
                error: function (response) {
                    toastr.error(response.responseText);
                }
            });
        }

        function OpenDeleteConfirmModalDialog(id, chartNumber) {
            bsd.confirm('Do you want to delete patient ' + chartNumber + ' ?', {
                callback: function (confirmed) {
                    if (confirmed) {
                        Delete(id);
                    }
                },
                controlsAlignment: "end",
                cancelText: "Cancel",
                cancelClass: "btn-secondary",
                confirmText: "Delete",
                confirmClass: "btn-danger"
            });
        }

        function Delete(id) {
            $.ajax({
                url: '/Patient/Delete?Id=' + id,
                type: 'DELETE',
                success: function (response) {
                    if (response == null || response == undefined) {
                        toastr.error("Response not found!!!");
                    }
                    else if (response.length > 0) {
                        for (let message of response) {
                            toastr.error(message);
                        }
                    }
                    else {
                        toastr.success("Deleted successfully.");
                        $("#patientModal").modal('hide');
                        $('#grid').trigger('reloadGrid');
                    }
                },
                error: function (response) {
                    toastr.error("Internal Server Error!!!");
                }
            });
        }

        function Save(isEdit, id) {
            var formData = $("#form-info").serialize();
            if (isEdit) {
                $.ajax({
                    url: '/Patient/Update?Id=' + id,
                    type: 'PUT',
                    data: formData,
                    success: function (response) {
                        if (response == null || response == undefined) {
                            toastr.error("Response not found!!!");
                        }
                        else if (response.length > 0) {
                            for (let message of response) {
                                toastr.error(message);
                            }
                        }
                        else {
                            toastr.success("Updated successfully.");
                            $("#patientModal").modal('hide');
                            $('#grid').trigger('reloadGrid');
                        }
                    },
                    error: function (response) {
                        toastr.error("Internal Server Error!!!");
                    }
                });
            }
            else {
                $.ajax({
                    url: '/Patient/Create',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response == null || response == undefined) {
                            toastr.error("Response not found!!!");
                        }
                        else if (response.length > 0) {
                            for (let message of response) {
                                toastr.error(message);
                            }
                        }
                        else {
                            toastr.success("Created successfully.");
                            $("#patientModal").modal('hide');
                            $('#grid').trigger('reloadGrid');
                        }
                    },
                    error: function (response) {
                        toastr.error("Internal Server Error!!!");
                    }
                });
            }
        }

        function ExportCsv() {
            var formData = $('#filter-form').serialize();
            $.ajax({
                url: '/Patient/ExportCsv',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response == null || response == undefined) {
                        toastr.error("Response not found!!!");
                    }
                    else {
                        // Create a blob object from the received response
                        var blob = new Blob([response], { type: 'application/octet-stream' });

                        // Create a temporary URL for the blob object
                        var url = window.URL.createObjectURL(blob);

                        // Create a link element and trigger the download
                        var a = document.createElement('a');
                        a.href = url;
                        a.download = 'Patients.csv';
                        document.body.appendChild(a);
                        a.click();

                        // Cleanup
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        toastr.success("Export Excel done.");
                    }
                },
                error: function (response) {
                    toastr.error("Internal Server Error!!!");
                }
            });
        }

        function PrintPdf() {
            var formData = $('#filter-form').serialize();
            $.ajax({
                url: '/Patient/PrintPdf',
                type: 'POST',
                data: formData,
                success: function (response) {
                    console.log(response)
                    if (response == null || response == undefined) {
                        toastr.error("Response not found!!!");
                    }
                    else {
                        // Create a blob object from the received response
                        var blob = new Blob([response], { type: 'application/pdf' });

                        // Create a temporary URL for the blob object
                        var url = window.URL.createObjectURL(blob);

                        // Create a link element and trigger the download
                        var a = document.createElement('a');
                        a.href = url;
                        a.download = 'Patients.pdf';
                        document.body.appendChild(a);
                        a.click();

                        // Cleanup
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        toastr.success("Export PDF done.");
                    }
                },
                error: function (response) {
                    toastr.error("Internal Server Error!!!");
                }
            });
        }
    </script>
}
